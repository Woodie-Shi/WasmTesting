Source path: ['/home/nju/WASM-testing/src/temp/8/func.c', '/home/nju/WASM-testing/src/temp/8/driver.c']
Option: -O3-mllvm -opt-bisect-limit=9
Output:

fatal error: error in backend: section size does not fit in a uint32_t
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /home/nju/emsdk/upstream/bin/clang -target wasm32-unknown-emscripten -fignore-exceptions -fvisibility=default -mllvm -combiner-global-alias-analysis=false -mllvm -enable-emscripten-sjlj -mllvm -disable-lsr --sysroot=/home/nju/emsdk/upstream/emscripten/cache/sysroot -DEMSCRIPTEN -Werror=implicit-function-declaration -Xclang -iwithsysroot/include/fakesdl -Xclang -iwithsysroot/include/compat -w /home/nju/WASM-testing/src/temp/8/driver.c -c -o /tmp/emscripten_temp_m9j313_n/driver_1.o
1.	<eof> parser at end of file
2.	Code generation
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x000055ca82cc0cd8 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x000055ca82cbe1de llvm::sys::RunSignalHandlers() + 238
2  clang     0x000055ca82cbff2f llvm::sys::CleanupOnSignal(unsigned long) + 255
3  clang     0x000055ca82c1e38e
4  clang     0x000055ca82c1e34b
5  clang     0x000055ca82cbab7b
6  clang     0x000055ca819dc3c3
7  clang     0x000055ca82c228b0 llvm::report_fatal_error(llvm::Twine const&, bool) + 304
8  clang     0x000055ca82c22776
9  clang     0x000055ca82a4eabd
10 clang     0x000055ca82a457b3
11 clang     0x000055ca82a138a0 llvm::MCObjectStreamer::finishImpl() + 464
12 clang     0x000055ca83cb13a4 llvm::AsmPrinter::doFinalization(llvm::Module&) + 6628
13 clang     0x000055ca827960b1 llvm::FPPassManager::doFinalization(llvm::Module&) + 49
14 clang     0x000055ca8278dd21 llvm::legacy::PassManagerImpl::run(llvm::Module&) + 6113
15 clang     0x000055ca83534eca clang::EmitBackendOutput(clang::DiagnosticsEngine&, clang::HeaderSearchOptions const&, clang::CodeGenOptions const&, clang::TargetOptions const&, clang::LangOptions const&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::__2::unique_ptr<llvm::raw_pwrite_stream, std::__2::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) + 9818
16 clang     0x000055ca8354e3d3 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) + 2371
17 clang     0x000055ca849c7869 clang::ParseAST(clang::Sema&, bool, bool) + 873
18 clang     0x000055ca839e0ae1 clang::FrontendAction::Execute() + 81
19 clang     0x000055ca8393c0a0 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1088
20 clang     0x000055ca83ae158a clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 618
21 clang     0x000055ca819dad0f cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 2303
22 clang     0x000055ca819d86c3
23 clang     0x000055ca837a0c09
24 clang     0x000055ca82c1e32c llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 140
25 clang     0x000055ca837a0655 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::__2::optional<llvm::StringRef>>, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>*, bool*) const + 357
26 clang     0x000055ca8375e117 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 935
27 clang     0x000055ca8377e4ab clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::__2::pair<int, clang::driver::Command const*>>&) + 763
28 clang     0x000055ca819d7933 clang_main(int, char**, llvm::ToolContext const&) + 13411
29 clang     0x000055ca819e7a0a main + 90
30 libc.so.6 0x00007f738932d083 __libc_start_main + 243
31 clang     0x000055ca8194b96a _start + 42
clang: error: clang frontend command failed with exit code 70 (use -v to see invocation)
clang version 19.0.0git (https:/github.com/llvm/llvm-project 34ba90745fa55777436a2429a51a3799c83c6d4c)
Target: wasm32-unknown-emscripten
Thread model: posix
InstalledDir: /home/nju/emsdk/upstream/bin
clang: note: diagnostic msg: Error generating preprocessed source(s).
emcc: error: '/home/nju/emsdk/upstream/bin/clang -target wasm32-unknown-emscripten -fignore-exceptions -fvisibility=default -mllvm -combiner-global-alias-analysis=false -mllvm -enable-emscripten-sjlj -mllvm -disable-lsr --sysroot=/home/nju/emsdk/upstream/emscripten/cache/sysroot -DEMSCRIPTEN -Werror=implicit-function-declaration -Xclang -iwithsysroot/include/fakesdl -Xclang -iwithsysroot/include/compat -w /home/nju/WASM-testing/src/temp/8/driver.c -c -o /tmp/emscripten_temp_m9j313_n/driver_1.o' failed (returned 1)

